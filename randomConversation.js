const fs = require("fs");
const CakeHash = require("cake-hash");
const moment = require("moment");
// -- Ë®ÄË™ûËß£Êûê
const kuromojin = require('kuromojin');
const negaposiAnalyzer = require('negaposi-analyzer-ja');

const dataFile = './data/conversation.json';

let randomConversation = {
    database: null,
    preparedReplies: {
        normal: [
            "„Å™„Çì„Åã„ÅÑ„Å£„ÅüÔºü", "(„Éª_„Éª)Ôºü", "„Åî„ÇÅ„ÇìËÅû„ÅÑ„Å¶„Å™„Åã„Å£„Åü", "„Å™„Çì„Å¶Ôºü", "„ÅØ„Éº„ÅÑ",
            "„Åù„Çå„ÅØÁü•„Çâ„Å™„ÅÑ", "„Çè„Åã„Çì„Å™„ÅÑ", "„Åà„ÉºÔºüÔºÅ", "„Åµ„ÇÄ„Åµ„ÇÄÔºü", "„ÅÜ„Éº„Çì„Å®", "„Åù„Çå„ÅßÔºü",
            "„Å™„Çã„Åª„Å©", "„Å©„ÅÜ„ÅÑ„ÅÜ„Åì„Å®Ôºü", `...ÔºüÔºÅ`, "„Å∏„Åá", "„Åµ„Éº„Çì", "(„Éª‚àÄ„Éª)", "(ÔΩ°>Ôπè<ÔΩ°)"
        ],
        positive: [
            "„Åù„Çå„ÅØ„Åô„Åî„ÅÑ", "„Åù„Çå„Åª„Çì„Å®„Åù„ÅÜ", "„Åï„Å£„Åô„ÅåÔºÅ", "Áü•„Çâ„Å™„Åã„Å£„Åü", "„Åô„Åî„ÅÑ„Å≠ÔΩû", "„Åô„Åî„Éº„ÅÑ", "„Çª„É≥„Çπ„ÅÑ„ÅÑ„Å≠ÔΩû", "„Åù„ÅÜ„Å™„Çì„Å†", "„Åù„Å£„Åã", "„Åª„ÅÜÔºü",
            "„Å™„Çã„Åª„Å©", "„ÅÜ„Çì„ÅÜ„Çì", "„Åª„ÅÖ„Åª„ÅÖ", "„Åô„Åî„ÅÑ„Å≠", "„ÅØ„Éº„ÅÑ", "(*¬¥œâÔΩÄ*)", "„Åü„Åó„Åã„Å´",
        ],
        negative: [
            "„Å≤„ÅÉ", "„Åù„Çä", "„Åù„Çå„ÅØ„Å≤„Å©„ÅÑ", "„ÅîÊÑÅÂÇ∑„Åï„Åæ„Åß„Åô", "„Å™„ÇÄ„Å™„ÇÄ", "„Åù„ÅÜ„Å†„Çà„Å≠„Åá", "„Å§„Çâ„ÅÑ", "( Ôºõ‚àÄÔºõ)", "Ôºº(^o^)Ôºè", "ÔΩ°Ôæü(Ôæü¬¥–îÔΩÄÔæü)ÔæüÔΩ°", "(Ôºõ¬¥–îÔΩÄ)", "( T_T)Ôºº(^-^ )", "(„Çú‚àÄ„ÄÇ)",
        ],
        answer: [
            "„ÅØ„ÅÑ", "„ÅÜ„Çì", "„ÅÜ„Éº„Çì", "„ÅÑ„ÅÑ„Åà", "„Å©„ÅÜ„Å†„Çç„ÅÜ", "‰ªñ„ÅÆ‰∫∫„Å´„ÇÇËÅû„ÅÑ„Å¶Ë¶ã„Å¶", "„Çè„Åã„Çì„Å™„ÅÑ", "(„Éª_„Éª)Ôºü", "„Å°„Çá„Å£„Å®„Å†„Åë", "„ÅØ„ÅÑ", "„ÅÜ„ÅÉ", "Áü•„Çâ„Å™„ÅÑ",
        ]
    },

    init: () => {
        randomConversation.database = JSON.parse(fs.readFileSync(dataFile, "utf8"));
    },

    getRandom: (array) => {
        return array[Math.floor(Math.random() * array.length)];
    },

    getList: () => {
        let list = [];
        randomConversation.database.commands.forEach((c) => {
            // list.push(`[${c.keyword}] - ${c.replyId}   ${randomConversation.database.replies[c.replyId]}`);
            list.push(`[${c.keyword}] - ${c.replyId}`); //TODO list „ÅØÂ§ö„Åè„Å™„Å£„Å¶„Åç„Åü„ÅÆ„Åß DM „Å´Â§âÊõ¥
        });
        return list;
    },

    getDetail: (keyword) => {
        let text = "";
        randomConversation.database.commands.forEach((c) => {
            if (keyword.match(new RegExp(c.keyword, 'g'))) {
                text = `[${c.keyword}] - ${c.replyId}   ${randomConversation.database.replies[c.replyId]}`;
            }
        });
        return text;
    },

    existCommand: (keyword) => {
        let commands = CakeHash.extract(randomConversation.database.commands, '{n}.keyword');
        let result = keyword.match(new RegExp(commands.join('|'), 'g'))
        return result !== null;
    },

    getNegaPosiScore: async (text) => {
        // +:positive -:negative
        let score = await kuromojin.tokenize(text).then((token) => {
            const score = negaposiAnalyzer(token);
            return score;
        });
        return score;
    },

    getReply: async (keyword) => {
        let result = {
            word: "",
            emoji: "",
        }

        if (randomConversation.existCommand(keyword)) {
            // ÁôªÈå≤Ê∏à„Åø„ÅÆË®ÄËëâ
            randomConversation.database.commands.forEach((c) => {
                if (keyword.match(new RegExp(c.keyword, 'g'))) {
                    let replies = randomConversation.database.replies[c.replyId].split(",");
                    result.word = randomConversation.getRandom(replies);
                }
            });
        }

        if (result.word == "") {
            // Âèñ„Çå„Å™„Åã„Å£„Åü„Å®„Åç
            let wordList = randomConversation.preparedReplies.normal;
            if (keyword.match(/(?:Ôºü|\?)$/g)) {
                // question
                wordList = randomConversation.preparedReplies.answer
            } else {
                // Âèñ„Çå„Å™„Åã„Å£„Åü„Å®„Åç„ÅØ„Éç„Ç¨„Éù„Ç∏Âà§Êñ≠„Çí„Åó„Å¶ÁôªÈå≤
                let score = await randomConversation.getNegaPosiScore(keyword);
                console.log(`${score}  ${keyword}`)
                if (score != 0) {
                    let negaPoji = score > 0 ? 'positive' : 'negative';
                    result.emoji = score > 0 ? "üòÑ" : "üòü";
                    wordList = randomConversation.preparedReplies[negaPoji]
                } else {
                    result.emoji = "üôÑ" // üòê
                }
            }
            result.word = randomConversation.getRandom(wordList);
        }
        return result;
    },

    addCommand: (args) => {
        if (/^\d+$/.test(args[1])) {
            // ÂºïÊï∞„ÅåÊï∞Â≠ó„ÅÆ„Åø - „Åô„Åß„Å´Â≠òÂú®„Åô„Çã„É©„É≥„ÉÄ„É†Ëøî‰ø°„Å´ÂØæÂøú„Åô„ÇãË®ÄËëâËøΩÂä†
            console.log('add command but exist reply: ' + args.join(' '))   //TODO Áõ£Êüª„É≠„Ç∞„Å´Â§âÊõ¥Ôºà‰ªñ„ÇÇÂÖ®ÈÉ®Ôºâ

            let randomReplyId = args[1].trim()
            if (randomConversation.database.replies[randomReplyId] === undefined) {
                // Â≠òÂú®„Åó„Å™„ÅÑ„É©„É≥„ÉÄ„É†Ëøî‰ø°
                return false;
            }
            //„Ç≥„Éû„É≥„Éâ
            let save = {
                keyword: args[0],
                replyId: randomReplyId
            };
            randomConversation.database.commands.push(save);

        } else if (!randomConversation.existCommand(args[0])) {
            //insert
            console.log('add command: ' + args.join(' '))

            //„É©„É≥„ÉÄ„É†Ëøî‰ø°
            randomConversation.database.replies.push(args[1]);
            //„Ç≥„Éû„É≥„Éâ
            let save = {
                keyword: args[0],
                replyId: randomConversation.database.replies.length - 1
            };
            randomConversation.database.commands.push(save);

        } else {
            //edit reply
            console.log('edit reply: ' + args.join(' '))

            randomConversation.database.commands.forEach((c) => {
                if (args[0].match(new RegExp(c.keyword))) {
                    //„É©„É≥„ÉÄ„É†Ëøî‰ø°
                    randomConversation.database.replies[c.replyId] = args[1];
                }
            });
        }
        //file write
        fs.writeFileSync(dataFile, JSON.stringify(randomConversation.database));
        return true;
    },

    deleteCommand: (args) => {
        if (randomConversation.existCommand(args[0])) {
            //delete
            console.log('delete command: ' + args.join(' '))

            randomConversation.database.commands.forEach((c, i) => {
                if (args[0].match(new RegExp(c.keyword))) {
                    randomConversation.database.commands.splice(i, 1)
                }
            });
            fs.writeFileSync(dataFile, JSON.stringify(randomConversation.database));
            return true;
        } else {
            return false;
        }
    },

    backupJson: () => {
        let now = moment();
        fs.writeFileSync(dataFile + "_" + now.format("YYYYMMDDHHmm"), JSON.stringify(randomConversation.database))
        //TODO: S3 „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó
    },

}

module.exports = randomConversation
